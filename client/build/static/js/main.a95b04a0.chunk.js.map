{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["getRandomFact","facts","activeFact","Math","floor","random","length","startingFact","catFacts","App","_useState","useState","_useState2","Object","slicedToArray","animal","setAnimal","_useState3","_useState4","activeFacts","setActiveFacts","_useState5","_useState6","fact","setFact","_useState7","_useState8","hideFact","setHidden","react_default","a","createElement","className","concat","onClick","dogFacts","window","setTimeout","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qk+BAKMA,EAAgB,SAACC,EAAOC,GAI5B,OAAOD,EAAME,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMK,UAG1CC,EAAeP,EAAcQ,GAuDpBC,MArDf,WAAe,IAAAC,EACeC,mBAAS,OADxBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACEI,EADFJ,EAAA,GAAAK,EAEyBN,mBAASH,GAFlCU,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEOE,EAFPF,EAAA,GAAAG,EAGWV,mBAASJ,GAHpBe,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGNE,EAHMD,EAAA,GAGAE,EAHAF,EAAA,GAAAG,EAIiBd,oBAAS,GAJ1Be,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAINE,EAJMD,EAAA,GAIIE,EAJJF,EAAA,GAkBb,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAS,QAAAC,OAAqB,QAAXlB,EAAmB,GAAK,cAC9Cc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIG,QAjBO,WACJ,QAAXnB,GACFC,EAAU,OACVI,EAAee,GACfX,EAAQxB,EAAcmC,MAEtBnB,EAAU,OACVI,EAAeZ,GACfgB,EAAQxB,EAAcQ,MASWwB,UAAU,SAClCjB,EADH,WAGAc,EAAAC,EAAAC,cAAA,KAAGC,UAAS,aAAAC,OAAeN,EAAW,UAAY,KAAOJ,KAG7DM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UACEC,UAAU,iCACVE,QAAS,WACPN,GAAU,GACVQ,OAAOC,WAAW,WAChBb,EAAQxB,EAAcmB,IACtBS,GAAU,IACT,OAPP,cAeNC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,6CCjDYO,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a95b04a0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.scss';\nimport catFacts from '../data/catFacts.json';\nimport dogFacts from '../data/dogFacts.json';\n\nconst getRandomFact = (facts, activeFact) => {\n  // if (activeFact) {\n  //   return activeFact\n  // }\n  return facts[Math.floor(Math.random() * facts.length)];\n};\n\nconst startingFact = getRandomFact(catFacts);\n\nfunction App() {\n  const [animal, setAnimal] = useState('Cat');\n  const [activeFacts, setActiveFacts] = useState(catFacts);\n  const [fact, setFact] = useState(startingFact);\n  const [hideFact, setHidden] = useState(false);\n\n  const toggleAnimal = () => {\n    if (animal === 'Cat') {\n      setAnimal('Dog');\n      setActiveFacts(dogFacts);\n      setFact(getRandomFact(dogFacts));\n    } else {\n      setAnimal('Cat');\n      setActiveFacts(catFacts);\n      setFact(getRandomFact(catFacts));\n    }\n  };\n\n  return (\n    <div className={`body ${animal === 'Cat' ? '' : 'dog-theme'}`}>\n      <div className=\"container\">\n        <div className=\"row fact-box\">\n          <div className=\"col s12\">\n            <h2 onClick={toggleAnimal} className=\"title\">\n              {animal} Facts!\n            </h2>\n            <p className={`fact-text ${hideFact ? 'no-show' : ''}`}>{fact}</p>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col s4\">\n            <button\n              className=\"btn button-large red-lighten-2\"\n              onClick={() => {\n                setHidden(true);\n                window.setTimeout(() => {\n                  setFact(getRandomFact(activeFacts));\n                  setHidden(false);\n                }, 600);\n              }}\n            >\n              Another\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className=\"foot right-align\">\n        <p>Created by William Bruntrager</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}